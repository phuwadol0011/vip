# === CONFIG (‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ==========================
BOT_TOKEN       = "8426669397:AAH-_sHmVq3uP3u-l79OxAFdtAr-nFOc138"
VIP_CHAT_ID     = -1002842045746    
ITEM_TITLE      = "VIP Lifetime Pass"
ITEM_DESC       = "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°"
ITEM_STARS      = 100                
INVITE_TTL_H    = 2                
# ==================================================

import asyncio
import logging
import time
from datetime import datetime, timedelta, timezone
from typing import Final

from telegram import Update, LabeledPrice, SuccessfulPayment
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, PreCheckoutQueryHandler, filters,
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
log = logging.getLogger("vip-bot")

# ---------- Commands ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {update.effective_user.first_name or ''} üëã\n"
        f"‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: {ITEM_TITLE}\n"
        f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {ITEM_DESC}\n"
        f"‡∏£‡∏≤‡∏Ñ‡∏≤: {ITEM_STARS} ‚≠ê\n\n"
        f"‡∏û‡∏¥‡∏°‡∏û‡πå /buy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Telegram Stars"
    )
    await update.message.reply_text(txt)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: /start /buy")

async def cmd_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Stars ‡πÉ‡∏ä‡πâ currency = XTR ‡πÅ‡∏•‡∏∞ provider_token ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á
    prices = [LabeledPrice(label=ITEM_TITLE, amount=ITEM_STARS)]
    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=ITEM_TITLE,
        description=ITEM_DESC,
        payload=f"vip-{update.effective_user.id}-{int(time.time())}",
        provider_token="",
        currency="XTR",
        prices=prices,
    )

async def handle_precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ~10‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    await update.pre_checkout_query.answer(ok=True)

async def handle_success(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp: SuccessfulPayment = update.message.successful_payment
    user = update.effective_user

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß/‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    expire_ts = int((datetime.now(timezone.utc) + timedelta(hours=INVITE_TTL_H)).timestamp())
    invite = await context.bot.create_chat_invite_link(
        chat_id=VIP_CHAT_ID,
        name=f"VIP {user.id} {int(time.time())}",
        expire_date=expire_ts,
        member_limit=1,
    )

    msg = (
        "‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ\n"
        f"‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: {ITEM_TITLE}\n"
        f"‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß): {invite.invite_link}\n"
        f"‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô {INVITE_TTL_H} ‡∏ä‡∏°."
    )
    await update.message.reply_text(msg)

# ---------- Main ----------
def main() -> None:
    if not BOT_TOKEN or not isinstance(VIP_CHAT_ID, int):
        raise RuntimeError("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ BOT_TOKEN / VIP_CHAT_ID ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡πà‡∏≠‡∏ô")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("buy", cmd_buy))
    app.add_handler(PreCheckoutQueryHandler(handle_precheckout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, handle_success))

    log.info("Bot starting‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
